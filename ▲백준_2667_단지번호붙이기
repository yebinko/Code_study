import sys
from collections import deque

# 입력값 받기
input = sys.stdin.readline

N = int(input())

graph = []  ## 그래프 리스트
result = []  ## 결과 리스트

for _ in range(N): ## 그래프 리스트 완성
    graph.append(list(map(int, input().rstrip())))

# 한 점을 기준으로 상하좌우로 1칸씩 이동할 좌표 설정
dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]

# bfs 
def bfs(graph, a, b):
    queue = deque()  
    queue.append([a, b])  # a,b 를 큐에서 그대로 빼기 위해 append로 추가
    graph[a][b] = 0  # 방문 처리
    count = 1  # 첫 번째 집을 방문하였기 때문에 count는 1로 시작
    
    while queue:
        x, y = queue.popleft()  # 큐에 들어간 좌표 x,y를 그대로 빼줌
        graph[x][y] = 0 # 방문 처리
        for i in range(4):  # 각 좌표마다 상하좌우로 이동
            nx = x + dx[i]
            ny = y + dy[i]

            # 좌표를 이동했을 때, 범위가 벗어나는 경우 -> 아무것도 하지 않음 (continue)
            if nx < 0 or nx >= len(graph) or ny < 0 or ny >= len(graph):
                continue

						# 만약 1이라면 = 만약 집을 방문하지 않았다면
            if graph[nx][ny] == 1: 
                graph[nx][ny] = 0  # 방문 처리
                queue.append([nx, ny])  # 새로운 x ,y 좌표를 큐에 추가
                count += 1  # count값 1 증가

    return count


# 그래프의 원소가 1일 때 bfs로 집을 방문
for i in range(N):
    for j in range(N):
        if graph[i][j] == 1:
            count = bfs(graph, i, j)
            result.append(count)

result.sort()  # 오름차순으로 정렬

print(len(result))  # 총 단지수 출력
for k in result:  # 각 단지마다 집의 수 출력
    print(k)
